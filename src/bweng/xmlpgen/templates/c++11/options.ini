# Copyright (c) 2016 Bernd Wengenroth
# Licensed under the MIT License.
# See LICENSE file for details.
#
# The framework generator tries to load the file "options.ini" from the template base path.
# All options are added to the property-space with prefix "freemarker."
#
# All options can be overwritten from main configuration. 
# E.g "X" will be overwritten with "freemarker.X" from the main configuration.

# Defaults for types (values are ":" separated include paths)
type.double.name=double
type.double.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.float.name=float
type.float.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.bool.name=bool
type.bool.pattern.tostring=(%var%)?"true":"false"
type.int8.name=int8_t
type.int8.include=<cstdint>
type.int8.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.int16.name=int16_t
type.int16.include=<cstdint>
type.int16.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.int32.name=int32_t
type.int32.include=<cstdint>
type.int32.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.int64.name=int64_t
type.int64.include=<cstdint>
type.int64.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.uint8.name=uint8_t
type.uint8.include=<cstdint>
type.uint8.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.uint16.name=uint16_t
type.uint16.include=<cstdint>
type.uint16.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.uint32.name=uint32_t
type.uint32.include=<cstdint>
type.uint32.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.uint64.name=uint64_t
type.uint64.include=<cstdint>
type.uint64.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.string.name=string
type.string.namespace=std
type.string.include=<string>
type.string.pattern.tostring=%var%.c_str()
type.binary.name=vector<uint8_t>
type.binary.namespace=std
type.binary.include=<cstdint>
type.binary.pattern.tostring=::XmlPGen::toString(%var%).c_str()
type.any.name=Any
type.any.namespace=XmlPGen
type.any.include="XmlPGen/Any.h"

# Currently templates does not support manual memory management.
# So for pointers std::shared_ptr are used for sub-elements.
type.list.include=<vector>
type.list.pattern.type=::std::vector< %type% >
type.list.pattern.size=%member%.size()
type.list.pattern.get=%member%[%index%]
# optimized "getlast". 
# If not specified, list.pattern.get( list.pattern.size + "-1" ) will be used.
type.list.pattern.getLast=%member%.back()
type.list.pattern.add=%member%.push_back(%element%)
type.list.pattern.remove=%member%.erase(%member%.begin()+%index%)
type.list.pattern.assign=%member%[%index%]=%element%

type.pointer.include=<memory>
type.pointer.pattern.type=::std::shared_ptr< %type% >
type.pointer.pattern.reftype=::std::shared_ptr< %type% > &
type.pointer.pattern.constreftype=::std::shared_ptr< %type% > const &
type.pointer.pattern.deref=(*(%variable%))
type.pointer.pattern.getptr=%variable%.get()
type.pointer.pattern.checknull=(%variable%.get()!=0)
type.pointer.pattern.new=::std::make_shared< %type% >()

attribute.pattern.name=Attribute_%name%
attribute.pattern.get=get%name%
attribute.pattern.set=set%name%
attribute.pattern.isset=isSet_%name%
attribute.pattern.clear=clear_%name%

element.pattern.name=Element_%name%
element.pattern.get=get%name%
element.pattern.set=set%name%
element.pattern.isset=isSet_%name%
element.pattern.clear=clear_%name%

# Defaults for generator options.
locale=en_GB
generate.member.padding=40
generate.member.protection=true
generate.setflags=true
generate.copyctor=true
generate.ctor=true
generate.getters=true
generate.setters=true
generate.assignment=true
generate.compare=true
# If generate.timestamp is true, the generated source will contain the time 
# of generation. Set it to false to suppress unwanted deltas. E.g. 
# to avoid new versions in configuration management tools.
generate.timestamp=true
