# Top level configuration.
# Here the xsd-adapter and the generator are glued together.
XsdAdapter=bweng.xmlpgen.adapter.XercesAdapter
Generator=bweng.xmlpgen.generator.freemarker.FreemarkerGenerator

# Logging options
#  If true the internal model is dumped.
log.model=False
#  If true the list of generated files is dumped.
log.files=true

# Files pattern to generate.
# Each entry consists of file-pattern, name-pattern and the template (separated by ':')
# If the pattern contains %type% the files are generated for each type.
# If the pattern contains only %namespace% the files are generated for each namespace (without any type information).
# If the pattern contains no no wildcard the files are generated only once (without any type or namespace information).
Files=\
 %namespace%/C%type%.h:C%type%:TypeHPP.fm,\
 %namespace%/C%type%.cpp:C%type%:TypeCPP.fm,\
 %namespace%/C%namespace%Schema.h:C%namespace%Schema:SchemaHPP.fm, \
 %namespace%/C%namespace%Schema.cpp:C%namespace%Schema:SchemaCPP.fm, \
 %namespace%/writer/C%type%_Writer.h:C%type%_Writer:writer/WriterHPP.fm,\
 %namespace%/writer/C%type%_Writer.cpp:C%type%_Writer:writer/WriterCPP.fm,\
 %namespace%/parser/C%type%_Handler.cpp:C%type%_Handler:parser/TypeHandlerCPP.fm, \
 %namespace%/CDocument.hpp::DocumentHPP.fm, \
 %namespace%/CDocument.cpp::DocumentCPP.fm, \
 %namespace%/writer/CMakeLists.txt::writer/Makefile.fm, \
 %namespace%/parser/CMakeLists.txt::parser/Makefile.fm, \
 %namespace%/test/TestReader.cpp::test/TestReader.fm, \
 %namespace%/test/CMakeLists.txt::test/Makefile.fm, \
 %namespace%/CMakeLists.txt::Makefile_namespace.fm, \
 CMakeLists.txt::Makefile.fm, \
 XmlPGen/CMakeLists.txt::XmlPGen/Makefile.fm, \
 XmlPGen/Log.h::XmlPGen/Log.h, \
 XmlPGen/TokenMap.h::XmlPGen/TokenMap.h, \
 XmlPGen/TTypeProxy.h::XmlPGen/TTypeProxy.h, \
 XmlPGen/Namespace.h::XmlPGen/Namespace.h, \
 XmlPGen/TypeHandler.h::XmlPGen/TypeHandler.h, \
 XmlPGen/Parser.h::XmlPGen/Parser.h, \
 XmlPGen/Any.h::XmlPGen/Any.h, \
 XmlPGen/IsSet.h::XmlPGen/IsSet.h, \
 XmlPGen/ToString.h::XmlPGen/ToString.h, \
 XmlPGen/ParseString.h::XmlPGen/ParseString.h, \
 XmlPGen/AbstractWriter.h::XmlPGen/AbstractWriter.h, \
 XmlPGen/StringWriter.h::XmlPGen/StringWriter.h, \
 XmlPGen/OStreamWriter.h::XmlPGen/OStreamWriter.h, \
 XmlPGen/TWrite.h::XmlPGen/TWrite.h, \
 XmlPGen/impl/Any.cpp::XmlPGen/impl/Any.cpp, \
 XmlPGen/impl/AbstractWriter.cpp::XmlPGen/impl/AbstractWriter.cpp, \
 XmlPGen/impl/Parser.cpp::XmlPGen/impl/Parser.cpp, \
 XmlPGen/impl/ToString.cpp::XmlPGen/impl/ToString.cpp, \
 XmlPGen/impl/ParseString.cpp::XmlPGen/impl/ParseString.cpp, \
 XmlPGen/impl/OStreamWriter.cpp::XmlPGen/impl/OStreamWriter.cpp, \
 XmlPGen/impl/StringWriter.cpp::XmlPGen/impl/StringWriter.cpp, \
 XmlPGen/impl/FunctionContentHandler.cpp::XmlPGen/impl/FunctionContentHandler.cpp, \
 XmlPGen/impl/CMakeLists.txt::XmlPGen/impl/Makefile.fm, \
 XmlPGen/libxml2/LibXML2Parser.cpp::XmlPGen/libxml2/LibXML2Parser.cpp, \
 XmlPGen/libxml2/LibXML2Parser.h::XmlPGen/libxml2/LibXML2Parser.h, \
 XmlPGen/libxml2/CMakeLists.txt::XmlPGen/libxml2/Makefile.fm 

# Overrides generator settings. 
# Each generator has an unique (hardcoded) prefix. E.g. the freemarker-generator use "freemarker".
# The defaults are loaded by the generator from "options.ini", located in the template-base-directory.

# Base path of the templates (relative to this file)
freemarker.TemplateBaseDirectory=c++11
freemarker.generate.assignment=True
freemarker.generate.compare=True
freemarker.generate.getters=True
freemarker.generate.setters=True
freemarker.generate.copyctor=True
freemarker.generate.ctor=True
freemarker.generate.member.protection=true
# Tell the generator how to handle booleans.
freemarker.type.bool.tostring=(%var%)?"true":"false"