<#--
  Copyright (c) 2016 Bernd Wengenroth
  Licensed under the MIT License.
  See LICENSE file for details.
-->
<#include "HelperFunctions.fm">
<#assign Clazz = namespace.GName>
<#assign rootPtrType=resolvePtrTypeFromTemplate(namespace.root.type, "TypeHPP")> 
#ifndef ${resolveIncludeDefine()}
#define ${resolveIncludeDefine()}
/************************************
 * ${file.name}
 *
 * Schema Object for ${namespace.uri}
 *
 * Generated by XmlPGen (c) 2013-2016 Bernd Wengenroth
 * ${timestamp()}   
 */
#include "XmlPGen/Schema.h"
#include "XmlPGen/TypeHandler.h"
#include "XmlPGen/AbstractWriter.h"
#include ${MakeLocalPath(namespace.root.type.TypeHPP.GPath)}

namespace ${namespace.name}
{
    enum class EToken
    {
      <#assign filteredList><#list namespace.lookup.chars?sort_by("id") as tokenchar><#if tokenchar.id != 0>${tokenchar.tokenName} = ${tokenchar.id}|</#if></#list></#assign>
      <#list filteredList?keep_before_last("|")?split("|") as tokenchar>
      ${tokenchar?capitalize}<#sep>,
      </#list>
    }; 
 
    /**
<#list namespace.documentation.lines as docLine>
     * ${c_comment_string(docLine)}
</#list>
     */ 
    class ${Clazz} : public ::XmlPGen::Schema
    {
    public:
      ::XmlPGen::TypeHandler * createRootHandler() const override;
      ::XmlPGen::TokenChar const * getTokenMap() const override;
      
      inline ${rootPtrType} getRoot() const
      {  
         return root;
      }
      
      void writeDocument( ::XmlPGen::AbstractWriter & );     
      
      ${Clazz}();

    private:
      ${rootPtrType} root;
    };
 
} // End of name-space ${namespace.name} 
 
#endif